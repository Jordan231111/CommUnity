const firebaseConfig = {
  apiKey: "AIzaSyDPUwZYkuKiwuUV-6e4WunUfxvgUL46pgw",
  authDomain: "your-app.firebaseapp.com",
  projectId: "community-f4809",
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();


// Add thread function
function addThread(threadName) {
  const threadRef = db.collection("Threads").doc(); // Auto-generate thread ID

  // Set thread data
  threadRef.set({
    thread_name: threadName,
  })
  .then(() => {
    console.log("Thread added successfully with ID:", threadRef.id);
  })
  .catch((error) => {
    console.error("Error adding thread:", error);
  });
}

// Function to add new comment to a thread

function addCommentToThread(threadId, commentText) {
  const commentsRef = db.collection("Threads").doc(threadId).collection("Comments").doc(); // Auto-generate comment ID

  // Set comment data
  commentsRef.set({
    text: commentText,
    upvotes: 0,
  })
  .then(() => {
    console.log("Comment added successfully with ID:", commentsRef.id);
  })
  .catch((error) => {
    console.error("Error adding comment:", error);
  });
}


// increment comment upvote count function

function incrementUpvote(threadId, commentId) {
  const commentRef = db.collection("Threads").doc(threadId).collection("Comments").doc(commentId);

  commentRef.update({
    upvotes: firebase.firestore.FieldValue.increment(1)
  })
  .then(() => {
    console.log("Upvote incremented successfully for comment ID:", commentId);
  })
  .catch((error) => {
    console.error("Error incrementing upvote:", error);
  });
}


// decrement comment upvote count function 

function decrementUpvote(threadId, commentId) {
  const commentRef = db.collection("Threads").doc(threadId).collection("Comments").doc(commentId);

  commentRef.update({
    upvotes: firebase.firestore.FieldValue.increment(-1)
  })
  .then(() => {
    console.log("Upvote decremented successfully for comment ID:", commentId);
  })
  .catch((error) => {
    console.error("Error decrementing upvote:", error);
  });
}


async function getCommentsWithUpvotes(threadId) {
  try {
    // Reference to the thread document
    const threadDocRef = db.collection("Threads").doc(threadId);

    // Get the thread document to access the thread_name field
    const threadDoc = await threadDocRef.get();
    if (!threadDoc.exists) {
      throw new Error("Thread does not exist");
    }

    const threadName = threadDoc.data().thread_name; // Access thread_name field

    // Reference to the comments collection within the specified thread
    const commentsRef = threadDocRef.collection("Comments");
    const snapshot = await commentsRef.get();

    // Create a dictionary with thread_name and comments with upvote counts
    const commentsDict = { thread_name: threadName };

    snapshot.forEach((doc) => {
      const data = doc.data();
      const commentText = data.text;
      const upvotes = data.upvotes || 0;
      
      // Add each comment's text as a key and upvote count as the value
      commentsDict[commentText] = upvotes;
    });

    // Convert the dictionary to JSON format
    return JSON.stringify(commentsDict);

  } catch (error) {
    console.error("Error fetching comments with upvotes:", error);
    throw new Error("Failed to retrieve comments and thread name");
  }
}



//function that takes in threadText and returns the thread ID
async function getThreadIdByText(threadText) {
  const threadsRef = db.collection('threads'); // Replace 'threads' with your actual collection name
  const snapshot = await threadsRef.where('text', '==', threadText).get();

  if (snapshot.empty) {
    console.log('No matching thread found.');
    return null;
  }

  let threadId = null;
  snapshot.forEach(doc => {
    threadId = doc.id; // This will get the document ID, which is the thread ID
  });

  return threadId;
}
